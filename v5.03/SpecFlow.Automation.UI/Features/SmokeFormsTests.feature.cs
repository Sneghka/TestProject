// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.Automation.UI.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SmokeFormsTestsFeature : Xunit.IClassFixture<SmokeFormsTestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SmokeFormsTests.feature"
#line hidden
        
        public SmokeFormsTestsFeature(SmokeFormsTestsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SmokeFormsTests", " \tAs a CWC user\r\n\tI want to open CWC forms\r\n\tSo that I can create/update/delete b" +
                    "usiness entities or execute business processes", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Open new instance form")]
        [Xunit.TraitAttribute("FeatureTitle", "SmokeFormsTests")]
        [Xunit.TraitAttribute("Description", "Open new instance form")]
        [Xunit.InlineDataAttribute("Events", new string[0])]
        [Xunit.InlineDataAttribute("Configure Stock Positions", new string[0])]
        [Xunit.InlineDataAttribute("Optimization Settings", new string[0])]
        public virtual void OpenNewInstanceForm(string page, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Open new instance form", null, exampleTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 testRunner.Given(string.Format("I open \"{0}\" page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("I click new button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("Form with correct title is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Verify adding new Countries")]
        [Xunit.TraitAttribute("FeatureTitle", "SmokeFormsTests")]
        [Xunit.TraitAttribute("Description", "Verify adding new Countries")]
        [Xunit.InlineDataAttribute("Countries", new string[0])]
        public virtual void VerifyAddingNewCountries(string page, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify adding new Countries", null, exampleTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 19
 testRunner.Given(string.Format("I open \"{0}\" page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When("I click create button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("I see add row is shown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Verify a create new instance form")]
        [Xunit.TraitAttribute("FeatureTitle", "SmokeFormsTests")]
        [Xunit.TraitAttribute("Description", "Verify a create new instance form")]
        [Xunit.InlineDataAttribute("Manage", new string[0])]
        [Xunit.InlineDataAttribute("Internal Orders", new string[0])]
        [Xunit.InlineDataAttribute("Inventory Checks Page", new string[0])]
        [Xunit.InlineDataAttribute("Routes", new string[0])]
        [Xunit.InlineDataAttribute("Asset Management", new string[0])]
        [Xunit.InlineDataAttribute("Region Asset Management Tables", new string[0])]
        [Xunit.InlineDataAttribute("Manufacturer Asset Management Tables", new string[0])]
        [Xunit.InlineDataAttribute("Denomination Asset Management Tables", new string[0])]
        [Xunit.InlineDataAttribute("Maintenance_Reason Asset Management Tables", new string[0])]
        [Xunit.InlineDataAttribute("Failure_Reason Asset Management Tables", new string[0])]
        [Xunit.InlineDataAttribute("Maintenance_Activity Asset Management Tables", new string[0])]
        [Xunit.InlineDataAttribute("Billing Lines", new string[0])]
        public virtual void VerifyACreateNewInstanceForm(string page, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify a create new instance form", null, exampleTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 28
 testRunner.Given(string.Format("I open \"{0}\" page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.When("I click create button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("I see a form is opened successul", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Open create instance form")]
        [Xunit.TraitAttribute("FeatureTitle", "SmokeFormsTests")]
        [Xunit.TraitAttribute("Description", "Open create instance form")]
        [Xunit.InlineDataAttribute("Regions", new string[0])]
        [Xunit.InlineDataAttribute("Companies", new string[0])]
        [Xunit.InlineDataAttribute("Service Points", new string[0])]
        [Xunit.InlineDataAttribute("Visit Addresses", new string[0])]
        [Xunit.InlineDataAttribute("Location Groups", new string[0])]
        [Xunit.InlineDataAttribute("Contact persons", new string[0])]
        [Xunit.InlineDataAttribute("Debtors", new string[0])]
        [Xunit.InlineDataAttribute("Banks", new string[0])]
        [Xunit.InlineDataAttribute("Bank Account", new string[0])]
        [Xunit.InlineDataAttribute("Contracts", new string[0])]
        [Xunit.InlineDataAttribute("Sites", new string[0])]
        [Xunit.InlineDataAttribute("Location Type", new string[0])]
        [Xunit.InlineDataAttribute("CashPoint Types", new string[0])]
        [Xunit.InlineDataAttribute("Products", new string[0])]
        [Xunit.InlineDataAttribute("Materials", new string[0])]
        [Xunit.InlineDataAttribute("Service Types", new string[0])]
        [Xunit.InlineDataAttribute("Package Types", new string[0])]
        [Xunit.InlineDataAttribute("Bag Types", new string[0])]
        [Xunit.InlineDataAttribute("Destination Locations", new string[0])]
        [Xunit.InlineDataAttribute("Bag Types Matching Material Types", new string[0])]
        [Xunit.InlineDataAttribute("Exchange Rates", new string[0])]
        [Xunit.InlineDataAttribute("Code Formats", new string[0])]
        [Xunit.InlineDataAttribute("Cash Point Model", new string[0])]
        [Xunit.InlineDataAttribute("Cash Point Status", new string[0])]
        [Xunit.InlineDataAttribute("Category", new string[0])]
        [Xunit.InlineDataAttribute("Status Category", new string[0])]
        [Xunit.InlineDataAttribute("Cash Point Reason Codes", new string[0])]
        [Xunit.InlineDataAttribute("Call Monitor", new string[0])]
        [Xunit.InlineDataAttribute("Sla Conditions", new string[0])]
        [Xunit.InlineDataAttribute("Call Categories", new string[0])]
        [Xunit.InlineDataAttribute("Requestors", new string[0])]
        [Xunit.InlineDataAttribute("Solution Codes", new string[0])]
        [Xunit.InlineDataAttribute("Failure Codes", new string[0])]
        [Xunit.InlineDataAttribute("Outbound orders view", new string[0])]
        [Xunit.InlineDataAttribute("Dispatch Orders View", new string[0])]
        [Xunit.InlineDataAttribute("Cash Center Reason Codes", new string[0])]
        [Xunit.InlineDataAttribute("Count Identifier", new string[0])]
        [Xunit.InlineDataAttribute("Packing Lines", new string[0])]
        [Xunit.InlineDataAttribute("Streams view", new string[0])]
        [Xunit.InlineDataAttribute("Interbank Orders", new string[0])]
        [Xunit.InlineDataAttribute("Take into storage orders view", new string[0])]
        [Xunit.InlineDataAttribute("Stock Locations View", new string[0])]
        [Xunit.InlineDataAttribute("Stock Location Types View", new string[0])]
        [Xunit.InlineDataAttribute("Movement types page", new string[0])]
        [Xunit.InlineDataAttribute("Stock Owners View", new string[0])]
        [Xunit.InlineDataAttribute("Performance Indicators", new string[0])]
        [Xunit.InlineDataAttribute("Workstations", new string[0])]
        [Xunit.InlineDataAttribute("Cameras", new string[0])]
        [Xunit.InlineDataAttribute("Employees", new string[0])]
        [Xunit.InlineDataAttribute("Production Machines View", new string[0])]
        [Xunit.InlineDataAttribute("Person roles", new string[0])]
        [Xunit.InlineDataAttribute("Maintenance Orders", new string[0])]
        [Xunit.InlineDataAttribute("Maintenance Locations", new string[0])]
        [Xunit.InlineDataAttribute("Asset Groups", new string[0])]
        [Xunit.InlineDataAttribute("Invoice Configuration Lines", new string[0])]
        public virtual void OpenCreateInstanceForm(string page, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Open create instance form", null, exampleTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 53
 testRunner.Given(string.Format("I open \"{0}\" page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
 testRunner.When("I click create button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("Form with correct title is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Verify Add image working")]
        [Xunit.TraitAttribute("FeatureTitle", "SmokeFormsTests")]
        [Xunit.TraitAttribute("Description", "Verify Add image working")]
        [Xunit.InlineDataAttribute("Email Addresses for New Order Notification", new string[0])]
        [Xunit.InlineDataAttribute("Bank Number Labels", new string[0])]
        [Xunit.InlineDataAttribute("Insurance Settings", new string[0])]
        [Xunit.InlineDataAttribute("Banknote Series", new string[0])]
        [Xunit.InlineDataAttribute("SETTLEMENT Profiles Settings and Manual Export", new string[0])]
        public virtual void VerifyAddImageWorking(string page, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Add image working", null, exampleTags);
#line 123
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 124
 testRunner.Given("I open \"local\" portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 125
 testRunner.And("I am login on portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.And(string.Format("I open \"{0}\" page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
 testRunner.When("I click add image", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
 testRunner.Then("I see add row is shown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Verify add new Cash Center Setting forms")]
        [Xunit.TraitAttribute("FeatureTitle", "SmokeFormsTests")]
        [Xunit.TraitAttribute("Description", "Verify add new Cash Center Setting forms")]
        [Xunit.InlineDataAttribute("Cash Center Site Setting", new string[0])]
        [Xunit.InlineDataAttribute("Cash Center Process Setting", new string[0])]
        public virtual void VerifyAddNewCashCenterSettingForms(string page, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify add new Cash Center Setting forms", null, exampleTags);
#line 142
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 143
 testRunner.Given("I open \"local\" portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 144
 testRunner.And("I am login on portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.And(string.Format("I open \"{0}\" page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.When("I click add image", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
 testRunner.Then("I see a form is opened successul", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Verify opening new Pre-announcements View(Capture Deposit Specification) form")]
        [Xunit.TraitAttribute("FeatureTitle", "SmokeFormsTests")]
        [Xunit.TraitAttribute("Description", "Verify opening new Pre-announcements View(Capture Deposit Specification) form")]
        public virtual void VerifyOpeningNewPre_AnnouncementsViewCaptureDepositSpecificationForm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify opening new Pre-announcements View(Capture Deposit Specification) form", null, ((string[])(null)));
#line 153
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 154
 testRunner.Given("I open \"local\" portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 155
 testRunner.And("I am login on portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 156
 testRunner.And("I open \"Pre-announcements View\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
 testRunner.When("I click new button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 158
 testRunner.Then("I see a form is opened successul", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Verify opening CIT Process Settings form")]
        [Xunit.TraitAttribute("FeatureTitle", "SmokeFormsTests")]
        [Xunit.TraitAttribute("Description", "Verify opening CIT Process Settings form")]
        public virtual void VerifyOpeningCITProcessSettingsForm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify opening CIT Process Settings form", null, ((string[])(null)));
#line 160
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 161
 testRunner.Given("I open \"local\" portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 162
 testRunner.And("I am login on portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.And("I open \"CIT Process Settings\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.When("I click add image", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 165
 testRunner.And("I confirm copy all settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
 testRunner.Then("I see a form is opened successul", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SmokeFormsTestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SmokeFormsTestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
