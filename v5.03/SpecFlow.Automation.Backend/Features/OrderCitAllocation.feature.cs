// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specflow.Automation.Backend.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "contract-data-generation-required")]
    [Xunit.TraitAttribute("Category", "cit-order-allocation")]
    [Xunit.TraitAttribute("Category", "transport-data-clearing-required")]
    public partial class OrderCitAllocationFeature : Xunit.IClassFixture<OrderCitAllocationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "OrderCitAllocation.feature"
#line hidden
        
        public OrderCitAllocationFeature(OrderCitAllocationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OrderCitAllocation", "\t\tAs a cash center operator \r\n\t\tI want service orders to be allocated to CIT Site" +
                    " in the form of transport orders\r\n\t\tSo that transport orders could be processed " +
                    "by CIT", ProgrammingLanguage.CSharp, new string[] {
                        "contract-data-generation-required",
                        "cit-order-allocation",
                        "transport-data-clearing-required"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Service Order is allocated correctly in the form of transport orders")]
        [Xunit.TraitAttribute("FeatureTitle", "OrderCitAllocation")]
        [Xunit.TraitAttribute("Description", "Service Order is allocated correctly in the form of transport orders")]
        [Xunit.InlineDataAttribute("Delivery", "Registered", new string[0])]
        [Xunit.InlineDataAttribute("Delivery", "Unconfirmed", new string[0])]
        [Xunit.InlineDataAttribute("Delivery", "Confirmed", new string[0])]
        [Xunit.InlineDataAttribute("Collection", "Unconfirmed", new string[0])]
        public virtual void ServiceOrderIsAllocatedCorrectlyInTheFormOfTransportOrders(string serviceTypes, string genericStatus, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Service Order is allocated correctly in the form of transport orders", null, exampleTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product",
                        "Quantity",
                        "IsLoose"});
            table1.AddRow(new string[] {
                        "10 EUR Bundle",
                        "2",
                        "false"});
            table1.AddRow(new string[] {
                        "20 EUR Loose Product",
                        "2",
                        "true"});
#line 11
 testRunner.Given(string.Format("{0} service order with service date in 0 days, \'{1}\' generic status and following" +
                        " content is created for \'5505ATM01\' location", serviceTypes, genericStatus), ((string)(null)), table1, "Given ");
#line 15
 testRunner.When("CIT Allocation job processes Service Order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("System creates Transport Order for \'5505ATM01\' location  with Delivery service ty" +
                    "pe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product",
                        "Quantity"});
            table2.AddRow(new string[] {
                        "20 EUR Loose Product",
                        "2"});
#line 17
 testRunner.And("System creates correct Transport Order products", ((string)(null)), table2, "And ");
#line 20
 testRunner.And("System creates successful Order CIT Allocation Job Log record with result OK for " +
                    "current Transport Order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                OrderCitAllocationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                OrderCitAllocationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
