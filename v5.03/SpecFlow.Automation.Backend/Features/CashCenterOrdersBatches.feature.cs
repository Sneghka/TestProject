// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specflow.Automation.Backend.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "cashcenter-data-generation-required")]
    [Xunit.TraitAttribute("Category", "contract-data-generation-required")]
    [Xunit.TraitAttribute("Category", "transport-data-clearing-required")]
    public partial class CashCenterOrdersBatchesFeature : Xunit.IClassFixture<CashCenterOrdersBatchesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CashCenterOrdersBatches.feature"
#line hidden
        
        public CashCenterOrdersBatchesFeature(CashCenterOrdersBatchesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CashCenterOrdersBatches", "\t\tAs a cash center operator \r\n\t\tI want stock orders to be grouped into orders bat" +
                    "ches\r\n\t\tSo that processing of multiple orders can be optimized", ProgrammingLanguage.CSharp, new string[] {
                        "cashcenter-data-generation-required",
                        "contract-data-generation-required",
                        "transport-data-clearing-required"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Validate linkage of two stock orders with regular products to orders batch")]
        [Xunit.TraitAttribute("FeatureTitle", "CashCenterOrdersBatches")]
        [Xunit.TraitAttribute("Description", "Validate linkage of two stock orders with regular products to orders batch")]
        public virtual void ValidateLinkageOfTwoStockOrdersWithRegularProductsToOrdersBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate linkage of two stock orders with regular products to orders batch", null, ((string[])(null)));
#line 10
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
 testRunner.Given("Stock order with \'regular\' type is created for \'5505ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
   testRunner.And("Stock order with \'regular\' type is created for \'5505ATM02\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
  testRunner.When("User validates linkage of created stock orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
  testRunner.Then("Validation is successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Validate linkage of two stock orders with loose products to orders batch")]
        [Xunit.TraitAttribute("FeatureTitle", "CashCenterOrdersBatches")]
        [Xunit.TraitAttribute("Description", "Validate linkage of two stock orders with loose products to orders batch")]
        public virtual void ValidateLinkageOfTwoStockOrdersWithLooseProductsToOrdersBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate linkage of two stock orders with loose products to orders batch", null, ((string[])(null)));
#line 17
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 18
 testRunner.Given("Stock order with \'notes loose\' type is created for \'5505ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
   testRunner.And("Stock order with \'coins loose\' type is created for \'5505ATM02\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
  testRunner.When("User validates linkage of created stock orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
  testRunner.Then("Validation is successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Validate linkage of two stock orders with regular and barcoded products to orders" +
            " batch")]
        [Xunit.TraitAttribute("FeatureTitle", "CashCenterOrdersBatches")]
        [Xunit.TraitAttribute("Description", "Validate linkage of two stock orders with regular and barcoded products to orders" +
            " batch")]
        public virtual void ValidateLinkageOfTwoStockOrdersWithRegularAndBarcodedProductsToOrdersBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate linkage of two stock orders with regular and barcoded products to orders" +
                    " batch", null, ((string[])(null)));
#line 24
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 25
 testRunner.Given("Stock order with \'regular\' type is created for \'5505ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
   testRunner.And("Stock order with \'barcoded\' type is created for \'5505ATM02\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
  testRunner.When("User validates linkage of created stock orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
  testRunner.Then("Validation is successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Link two stock orders with regular products to new orders batch")]
        [Xunit.TraitAttribute("FeatureTitle", "CashCenterOrdersBatches")]
        [Xunit.TraitAttribute("Description", "Link two stock orders with regular products to new orders batch")]
        public virtual void LinkTwoStockOrdersWithRegularProductsToNewOrdersBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Link two stock orders with regular products to new orders batch", null, ((string[])(null)));
#line 31
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 32
 testRunner.Given("Stock order with \'regular\' type is created for \'5505ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
   testRunner.And("Stock order with \'regular\' type is created for \'5505ATM02\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Location"});
            table1.AddRow(new string[] {
                        "5505ATM01"});
            table1.AddRow(new string[] {
                        "5505ATM02"});
#line 34
  testRunner.When("User links stock orders for the next locations to new orders batch", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Location"});
            table2.AddRow(new string[] {
                        "5505ATM01"});
            table2.AddRow(new string[] {
                        "5505ATM02"});
#line 38
  testRunner.Then("System links stock orders for the next locations to the orders batch", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Link stock order with regular products to existing orders batch")]
        [Xunit.TraitAttribute("FeatureTitle", "CashCenterOrdersBatches")]
        [Xunit.TraitAttribute("Description", "Link stock order with regular products to existing orders batch")]
        public virtual void LinkStockOrderWithRegularProductsToExistingOrdersBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Link stock order with regular products to existing orders batch", null, ((string[])(null)));
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 45
 testRunner.Given("Stock order with \'regular\' type is created for \'5505ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
   testRunner.And("Stock order with \'regular\' type is created for \'5505ATM02\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Location"});
            table3.AddRow(new string[] {
                        "5505ATM01"});
#line 47
   testRunner.And("Stock orders for the next locations are linked to new orders batch", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Location"});
            table4.AddRow(new string[] {
                        "5505ATM02"});
#line 50
  testRunner.When("User links stock orders for the next locations to created orders batch", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Location"});
            table5.AddRow(new string[] {
                        "5505ATM02"});
#line 53
  testRunner.Then("System links stock orders for the next locations to the orders batch", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Link stock order with loose products to existing orders batch")]
        [Xunit.TraitAttribute("FeatureTitle", "CashCenterOrdersBatches")]
        [Xunit.TraitAttribute("Description", "Link stock order with loose products to existing orders batch")]
        public virtual void LinkStockOrderWithLooseProductsToExistingOrdersBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Link stock order with loose products to existing orders batch", null, ((string[])(null)));
#line 58
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 59
 testRunner.Given("Stock order with \'notes loose\' type is created for \'5505ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
   testRunner.And("Stock order with \'coins loose\' type is created for \'5505ATM02\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Location"});
            table6.AddRow(new string[] {
                        "5505ATM01"});
#line 61
   testRunner.And("Stock orders for the next locations are linked to new orders batch", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Location"});
            table7.AddRow(new string[] {
                        "5505ATM02"});
#line 64
  testRunner.When("User links stock orders for the next locations to created orders batch", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Location"});
            table8.AddRow(new string[] {
                        "5505ATM02"});
#line 67
  testRunner.Then("System links stock orders for the next locations to the orders batch", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Link stock order with loose products to existing orders batch with regular produc" +
            "ts order")]
        [Xunit.TraitAttribute("FeatureTitle", "CashCenterOrdersBatches")]
        [Xunit.TraitAttribute("Description", "Link stock order with loose products to existing orders batch with regular produc" +
            "ts order")]
        public virtual void LinkStockOrderWithLooseProductsToExistingOrdersBatchWithRegularProductsOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Link stock order with loose products to existing orders batch with regular produc" +
                    "ts order", null, ((string[])(null)));
#line 72
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 73
 testRunner.Given("Stock order with \'regular\' type is created for \'5505ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
   testRunner.And("Stock order with \'coins loose\' type is created for \'5505ATM02\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Location"});
            table9.AddRow(new string[] {
                        "5505ATM01"});
#line 75
   testRunner.And("Stock orders for the next locations are linked to new orders batch", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Location"});
            table10.AddRow(new string[] {
                        "5505ATM02"});
#line 78
  testRunner.When("User links stock orders for the next locations to created orders batch", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table11.AddRow(new string[] {
                        "Outbound orders of loose products type cannot be assigned to orders batch togethe" +
                            "r with outbound orders of another type."});
#line 81
  testRunner.Then("Linkage is failed", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Link stock order with regular products to existing orders batch with loose produc" +
            "ts order")]
        [Xunit.TraitAttribute("FeatureTitle", "CashCenterOrdersBatches")]
        [Xunit.TraitAttribute("Description", "Link stock order with regular products to existing orders batch with loose produc" +
            "ts order")]
        public virtual void LinkStockOrderWithRegularProductsToExistingOrdersBatchWithLooseProductsOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Link stock order with regular products to existing orders batch with loose produc" +
                    "ts order", null, ((string[])(null)));
#line 86
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 87
 testRunner.Given("Stock order with \'regular\' type is created for \'5505ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 88
   testRunner.And("Stock order with \'coins loose\' type is created for \'5505ATM02\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Location"});
            table12.AddRow(new string[] {
                        "5505ATM02"});
#line 89
   testRunner.And("Stock orders for the next locations are linked to new orders batch", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Location"});
            table13.AddRow(new string[] {
                        "5505ATM01"});
#line 92
  testRunner.When("User links stock orders for the next locations to created orders batch", ((string)(null)), table13, "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table14.AddRow(new string[] {
                        "Outbound orders of loose products type cannot be assigned to orders batch togethe" +
                            "r with outbound orders of another type."});
#line 95
  testRunner.Then("Linkage is failed", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Validate linkage to orders batch when service order is not replicated")]
        [Xunit.TraitAttribute("FeatureTitle", "CashCenterOrdersBatches")]
        [Xunit.TraitAttribute("Description", "Validate linkage to orders batch when service order is not replicated")]
        public virtual void ValidateLinkageToOrdersBatchWhenServiceOrderIsNotReplicated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate linkage to orders batch when service order is not replicated", null, ((string[])(null)));
#line 101
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 102
 testRunner.Given("Stock order with \'regular\' type is created for \'5505ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 103
   testRunner.And("Service order of created stock order is not yet replicated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
  testRunner.When("User validates linkage of created stock order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table15.AddRow(new string[] {
                        "Required service order(s) is(are) not replicated to current site. Please contact " +
                            "administrator."});
#line 105
  testRunner.Then("Validation is failed", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Validate linkage of two stock orders with different CIT depots to orders batch")]
        [Xunit.TraitAttribute("FeatureTitle", "CashCenterOrdersBatches")]
        [Xunit.TraitAttribute("Description", "Validate linkage of two stock orders with different CIT depots to orders batch")]
        public virtual void ValidateLinkageOfTwoStockOrdersWithDifferentCITDepotsToOrdersBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate linkage of two stock orders with different CIT depots to orders batch", null, ((string[])(null)));
#line 111
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 112
 testRunner.Given("Stock order with \'regular\' type is created for \'5505ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 113
   testRunner.And("Stock order with \'regular\' type is created for \'5506ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
  testRunner.When("User validates linkage of created stock orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table16.AddRow(new string[] {
                        "Please, select orders addressed to the same CIT depot."});
#line 115
  testRunner.Then("Validation is failed", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Validate linkage of two stock orders with different cash centers to orders batch")]
        [Xunit.TraitAttribute("FeatureTitle", "CashCenterOrdersBatches")]
        [Xunit.TraitAttribute("Description", "Validate linkage of two stock orders with different cash centers to orders batch")]
        public virtual void ValidateLinkageOfTwoStockOrdersWithDifferentCashCentersToOrdersBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate linkage of two stock orders with different cash centers to orders batch", null, ((string[])(null)));
#line 122
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 123
 testRunner.Given("Servicing CIT depot of \'5506ATM01\' location is set to \'NCIT\' CIT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 124
   testRunner.And("Stock order with \'regular\' type is created for \'5505ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
   testRunner.And("Stock order with \'regular\' type is created for \'5506ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
  testRunner.When("User validates linkage of created stock orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table17.AddRow(new string[] {
                        "Please, select orders addressed to the same site."});
#line 127
  testRunner.Then("Validation is failed", ((string)(null)), table17, "Then ");
#line 130
   testRunner.And("Servicing CIT depot of \'5506ATM01\' location is set to \'CCIT\' CIT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Validate linkage of stock orders with inappropriate status to orders batch")]
        [Xunit.TraitAttribute("FeatureTitle", "CashCenterOrdersBatches")]
        [Xunit.TraitAttribute("Description", "Validate linkage of stock orders with inappropriate status to orders batch")]
        public virtual void ValidateLinkageOfStockOrdersWithInappropriateStatusToOrdersBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate linkage of stock orders with inappropriate status to orders batch", null, ((string[])(null)));
#line 134
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 135
 testRunner.Given("Stock order with \'regular\' type is created for \'5505ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 136
   testRunner.And("Stock order with \'regular\' type is created for \'5505ATM02\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
   testRunner.And("Stock order for \'5505ATM01\' location has \'in progress\' status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
   testRunner.And("Stock order for \'5505ATM02\' location has \'in progress\' status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
  testRunner.When("User validates linkage of created stock orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table18.AddRow(new string[] {
                        "Stock Orders cannot be linked to Order Batch. At least one selected Stock Order h" +
                            "as Status which is not ‘registered’ or linked to Orders Batch with Status which " +
                            "is not ‘registered’. Incorrect Stock Orders: {0}"});
#line 140
  testRunner.Then("Validation is failed with parameter", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Validate linkage of two stock orders with incompatible types to orders batch")]
        [Xunit.TraitAttribute("FeatureTitle", "CashCenterOrdersBatches")]
        [Xunit.TraitAttribute("Description", "Validate linkage of two stock orders with incompatible types to orders batch")]
        public virtual void ValidateLinkageOfTwoStockOrdersWithIncompatibleTypesToOrdersBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate linkage of two stock orders with incompatible types to orders batch", null, ((string[])(null)));
#line 146
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 147
 testRunner.Given("Stock order with \'regular\' type is created for \'5505ATM01\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 148
   testRunner.And("Stock order with \'notes loose\' type is created for \'5505ATM02\' location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
  testRunner.When("User validates linkage of created stock orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Message"});
            table19.AddRow(new string[] {
                        "Outbound orders of loose products type cannot be assigned to orders batch togethe" +
                            "r with outbound orders of another type."});
#line 150
  testRunner.Then("Validation is failed", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CashCenterOrdersBatchesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CashCenterOrdersBatchesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
