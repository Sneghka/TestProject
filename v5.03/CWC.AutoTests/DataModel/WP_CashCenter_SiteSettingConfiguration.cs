// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CWC.AutoTests.DataModel
{

    // WP_CashCenter_SiteSetting
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class WP_CashCenter_SiteSettingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WP_CashCenter_SiteSetting>
    {
        public WP_CashCenter_SiteSettingConfiguration()
            : this("dbo")
        {
        }

        public WP_CashCenter_SiteSettingConfiguration(string schema)
        {
            ToTable("WP_CashCenter_SiteSetting", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Default).HasColumnName(@"Default").HasColumnType("bit").IsRequired();
            Property(x => x.AuthorID).HasColumnName(@"AuthorID").HasColumnType("int").IsOptional();
            Property(x => x.EditorId).HasColumnName(@"EditorId").HasColumnType("int").IsOptional();
            Property(x => x.SiteId).HasColumnName(@"SiteId").HasColumnType("int").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").HasColumnType("datetime").IsRequired();
            Property(x => x.ConfirmationReception).HasColumnName(@"ConfirmationReception").HasColumnType("int").IsRequired();
            Property(x => x.DualControlReception).HasColumnName(@"DualControlReception").HasColumnType("bit").IsRequired();
            Property(x => x.DualControlReceptionCompleted).HasColumnName(@"DualControlReceptionCompleted").HasColumnType("bit").IsRequired();
            Property(x => x.DualControlUnpacking).HasColumnName(@"DualControlUnpacking").HasColumnType("bit").IsRequired();
            Property(x => x.DualControlCounting).HasColumnName(@"DualControlCounting").HasColumnType("bit").IsRequired();
            Property(x => x.DualControlCapturing).HasColumnName(@"DualControlCapturing").HasColumnType("bit").IsRequired();
            Property(x => x.AllowCrossCheck).HasColumnName(@"AllowCrossCheck").HasColumnType("bit").IsRequired();
            Property(x => x.CountingServiceTypeID).HasColumnName(@"CountingServiceTypeID").HasColumnType("int").IsOptional();
            Property(x => x.OutboundServiceTypeID).HasColumnName(@"OutboundServiceTypeID").HasColumnType("int").IsOptional();
            Property(x => x.InternalServiceTypeID).HasColumnName(@"InternalServiceTypeID").HasColumnType("int").IsOptional();
            Property(x => x.ValidateCustomerReferences).HasColumnName(@"ValidateCustomerReferences").HasColumnType("bit").IsRequired();
            Property(x => x.DispatchServiceTypeID).HasColumnName(@"DispatchServiceTypeID").HasColumnType("int").IsOptional();
            Property(x => x.UID).HasColumnName(@"UID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.InterbankServiceTypeID).HasColumnName(@"InterbankServiceTypeID").HasColumnType("int").IsOptional();
            Property(x => x.IsCapturingAllowed).HasColumnName(@"IsCapturingAllowed").HasColumnType("bit").IsRequired();
            Property(x => x.SkipStreamChangeWarning).HasColumnName(@"SkipStreamChangeWarning").HasColumnType("bit").IsRequired();
            Property(x => x.SkipBulkHCRegistration).HasColumnName(@"SkipBulkHCRegistration").HasColumnType("bit").IsRequired();
            Property(x => x.IsSkipDynamicBatchesGeneration).HasColumnName(@"IsSkipDynamicBatchesGeneration").HasColumnType("bit").IsRequired();
            Property(x => x.IsRedirectToMother).HasColumnName(@"IsRedirectToMother").HasColumnType("bit").IsRequired();
            Property(x => x.IsCancelCountAllowed).HasColumnName(@"IsCancelCountAllowed").HasColumnType("bit").IsRequired();
            Property(x => x.IsReCountAllowed).HasColumnName(@"IsReCountAllowed").HasColumnType("bit").IsRequired();
            Property(x => x.IsCloseFormAllowed).HasColumnName(@"IsCloseFormAllowed").HasColumnType("bit").IsRequired();
            Property(x => x.AlertDiscrepancyZeroValue).HasColumnName(@"AlertDiscrepancyZeroValue").HasColumnType("bit").IsRequired();
            Property(x => x.SiteType).HasColumnName(@"SiteType").HasColumnType("int").IsOptional();
            Property(x => x.SiteSubType).HasColumnName(@"SiteSubType").HasColumnType("int").IsOptional();
            Property(x => x.NumberFormatID).HasColumnName(@"NumberFormatID").HasColumnType("int").IsOptional();
            Property(x => x.PermanentNumberFormatID).HasColumnName(@"PermanentNumberFormatID").HasColumnType("int").IsOptional();
            Property(x => x.IsPackingBanknotes).HasColumnName(@"IsPackingBanknotes").HasColumnType("bit").IsRequired();
            Property(x => x.IsFastWayCapturing).HasColumnName(@"IsFastWayCapturing").HasColumnType("bit").IsRequired();
            Property(x => x.IsAllowManualBatches).HasColumnName(@"IsAllowManualBatches").HasColumnType("bit").IsRequired();
            Property(x => x.IsAllowMixedBatches).HasColumnName(@"IsAllowMixedBatches").HasColumnType("bit").IsRequired();
            Property(x => x.IsReceiveWithoutLocationFrom).HasColumnName(@"IsReceiveWithoutLocationFrom").HasColumnType("bit").IsRequired();
            Property(x => x.IsRepackInnersQuickReception).HasColumnName(@"IsRepackInnersQuickReception").HasColumnType("bit").IsRequired();
            Property(x => x.IsReconcileRepackCapturing).HasColumnName(@"IsReconcileRepackCapturing").HasColumnType("bit").IsRequired();
            Property(x => x.IsReconcileRepackCounting).HasColumnName(@"IsReconcileRepackCounting").HasColumnType("bit").IsRequired();
            Property(x => x.IsOverwriteBankAccount).HasColumnName(@"IsOverwriteBankAccount").HasColumnType("bit").IsRequired();
            Property(x => x.NumberFormatBanknotesID).HasColumnName(@"NumberFormatBanknotesID").HasColumnType("int").IsOptional();
            Property(x => x.IsPresortingAllowed).HasColumnName(@"IsPresortingAllowed").HasColumnType("bit").IsRequired();
            Property(x => x.IsContainersExpectedBlocking).HasColumnName(@"IsContainersExpectedBlocking").HasColumnType("bit").IsRequired();
            Property(x => x.IsContainersInReceptionBlocking).HasColumnName(@"IsContainersInReceptionBlocking").HasColumnType("bit").IsRequired();
            Property(x => x.IsContainersInCountingBlocking).HasColumnName(@"IsContainersInCountingBlocking").HasColumnType("bit").IsRequired();
            Property(x => x.IsContainersMissingBlocking).HasColumnName(@"IsContainersMissingBlocking").HasColumnType("bit").IsRequired();
            Property(x => x.IsContainersOnHoldBlocking).HasColumnName(@"IsContainersOnHoldBlocking").HasColumnType("bit").IsRequired();
            Property(x => x.IsBatchesInProgressBlocking).HasColumnName(@"IsBatchesInProgressBlocking").HasColumnType("bit").IsRequired();
            Property(x => x.IsStockOwnersUnsealedBlocking).HasColumnName(@"IsStockOwnersUnsealedBlocking").HasColumnType("bit").IsRequired();
            Property(x => x.IsDiscrepanciesInProgressBlocking).HasColumnName(@"IsDiscrepanciesInProgressBlocking").HasColumnType("bit").IsRequired();
            Property(x => x.DayClosureEmails).HasColumnName(@"DayClosureEmails").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.DayClosureNotificationInterval).HasColumnName(@"DayClosureNotificationInterval").HasColumnType("int").IsRequired();
            Property(x => x.IsRepackSecondNumberRequired).HasColumnName(@"IsRepackSecondNumberRequired").HasColumnType("bit").IsRequired();
            Property(x => x.IsRepackPermanentNumberRequired).HasColumnName(@"IsRepackPermanentNumberRequired").HasColumnType("bit").IsRequired();
            Property(x => x.AllowSecondStepCounting).HasColumnName(@"AllowSecondStepCounting").HasColumnType("int").IsRequired();
            Property(x => x.PrintCrossCheckBatchReceipt).HasColumnName(@"PrintCrossCheckBatchReceipt").HasColumnType("bit").IsRequired();
            Property(x => x.IsInboundStockOwnersBlocking).HasColumnName(@"IsInboundStockOwnersBlocking").HasColumnType("bit").IsRequired();
            Property(x => x.IsOutboundStockOwnersBlocking).HasColumnName(@"IsOutboundStockOwnersBlocking").HasColumnType("bit").IsRequired();
            Property(x => x.UseGeneralDayClosure).HasColumnName(@"UseGeneralDayClosure").HasColumnType("bit").IsRequired();
            Property(x => x.AutomaticallyConfirmPacking).HasColumnName(@"AutomaticallyConfirmPacking").HasColumnType("bit").IsRequired();
            Property(x => x.AllowSubstringRecognition).HasColumnName(@"AllowSubstringRecognition").HasColumnType("bit").IsRequired();
            Property(x => x.AllowMultipleMachineCountResults).HasColumnName(@"AllowMultipleMachineCountResults").HasColumnType("bit").IsRequired();
            Property(x => x.IsCancelUnpackingAllowed).HasColumnName(@"IsCancelUnpackingAllowed").HasColumnType("bit").IsRequired();
            Property(x => x.IsCancelCapturingAllowed).HasColumnName(@"IsCancelCapturingAllowed").HasColumnType("bit").IsRequired();
            Property(x => x.IsSkipCountResultsEditing).HasColumnName(@"IsSkipCountResultsEditing").HasColumnType("bit").IsRequired();
            Property(x => x.LooseProductsOrdersBagTypeID).HasColumnName(@"LooseProductsOrdersBagTypeID").HasColumnType("int").IsOptional();
            Property(x => x.IsDualControlManualStockCorrection).HasColumnName(@"IsDualControlManualStockCorrection").HasColumnType("bit").IsRequired();
            Property(x => x.AtmPickList).HasColumnName(@"AtmPickList").HasColumnType("int").IsRequired();
            Property(x => x.IsRouteValidation).HasColumnName(@"IsRouteValidation").HasColumnType("bit").IsRequired();
            Property(x => x.UKBarcodeFirstPosition).HasColumnName(@"UKBarcodeFirstPosition").HasColumnType("int").IsOptional();
            Property(x => x.UKBarcodeRangeFrom).HasColumnName(@"UKBarcodeRangeFrom").HasColumnType("int").IsOptional();
            Property(x => x.UKBarcodeRangeTo).HasColumnName(@"UKBarcodeRangeTo").HasColumnType("int").IsOptional();
            Property(x => x.IsPickListShowWeight).HasColumnName(@"IsPickListShowWeight").HasColumnType("bit").IsRequired();
            Property(x => x.IsDispatchScanAllowed).HasColumnName(@"IsDispatchScanAllowed").HasColumnType("bit").IsRequired();
            Property(x => x.IsAutomaticallyConfirmAssigningToDispatchOrder).HasColumnName(@"IsAutomaticallyConfirmAssigningToDispatchOrder").HasColumnType("bit").IsRequired();
        }
    }

}
// </auto-generated>
